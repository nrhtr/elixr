%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "internal.h"
#include "elixr.h"
#include "compile.h"
#include "types.h"

#define YYSTYPE XR
#define YY_CTX_LOCAL
#define YY_CTX_MEMBERS XR src; XR method; XR object; XR dump;

unsigned int lineNumber;

#define YY_INPUT(buf, result, max)		\
  {						\
    int c= getc(stdin);				\
    if ('\n' == c || '\r' == c) ++lineNumber;	\
    result= (EOF == c) ? 0 : (*(buf)= c, 1);	\
  }


#define XR_AST1(type, a)       ast_node(AST_##type, a, VAL_NIL, VAL_NIL)
#define XR_AST2(type, a, b)    ast_node(AST_##type, a, b, VAL_NIL)
#define XR_AST3(type, a, b, c) ast_node(AST_##type, a, b, c)
%}

program = e:expression -- ';' --
expression = (m:message)*
message = s:symbol a:arguments?
arguments = Open (a:arg (',' b:arg)* )? Close
arg = expression

symbol = Identifier -

Identifier = < Letter (Letter | Digit)* >
Letter = [a-z]
Digit = [0-9]

Open    = '(' -
Close   = ')' -
Space   = ' ' | '\f' | '\v' | '\t'
Comment = '#' (!EOL .)*
EOL     = '\n' | '\r\n' | '\r'
-       = (Space | Comment)*
--      = (Space | Comment | EOL)*
%%

void yyerror(char *message, yycontext *yyctx)
{
    char *fileName = "<stdin>";
    FILE *input = stdin;
    fprintf(stderr, "%s:%d: %s", fileName, lineNumber, message);

    if (yyctx->text[0]) fprintf(stderr, " near token '%s'", yyctx->text);

    if (yyctx->pos < yyctx->limit || !feof(input)) {
        yyctx->buf[yyctx->limit]= '\0';
        fprintf(stderr, " before text \"");

        while (yyctx->pos < yyctx->limit) {
            if ('\n' == yyctx->buf[yyctx->pos] || '\r' == yyctx->buf[yyctx->pos]) break;
            fputc(yyctx->buf[yyctx->pos++], stderr);
        }

        if (yyctx->pos == yyctx->limit) {
            int c;
            while (EOF != (c= fgetc(input)) && '\n' != c && '\r' != c)
                fputc(c, stderr);
        }

        fputc('\"', stderr);
    }

    fprintf(stderr, "\n");
}

XR xr_parse_expr_from_stdin()
{
    lineNumber = 1;

    yycontext ctx;
    memset(&ctx, 0, sizeof(yycontext));

    while (yyparsefrom(&ctx, yy_program));

    yyerror("syntax error", &ctx);
    return ctx.dump;
}

%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "internal.h"
#include "elixr.h"
#include "compile.h"
#include "types.h"

#include <types/xrstring.h>

#undef YY_DEBUG
#define YYSTYPE XR
#define YY_CTX_LOCAL
#define YY_CTX_MEMBERS XR src; XR method; XR object; XR dump; int line_number; char *filename; FILE *file_handle; int cursor;

extern FILE* dbg_output;

#define DEBUG_PARSER 1
#define ERROR(args...) fprintf(stderr, "<%s>:%d:%d ", yy->filename, yy->line_number, yy->cursor); fprintf(stderr, args);

#if DEBUG_PARSER
#define LOG(args...) fprintf(stderr, args)
#else
#define LOG(args...)
#endif

XR string_buf;

#define YY_INPUT(ctx, buf, result, max)	\
  {\
    int c = fgetc(ctx->file_handle);\
    ctx->cursor++;\
    if ('\n' == c || '\r' == c) { ++ctx->line_number; ctx->cursor = 0; }\
    result= (EOF == c) ? 0 : (*(buf)= c, 1);\
  }

#define AST1(type, a)       ast_node(AST_##type, a, VAL_NIL, VAL_NIL)
#define AST2(type, a, b)    ast_node(AST_##type, a, b, VAL_NIL)
#define AST3(type, a, b, c) ast_node(AST_##type, a, b, c)
%}

dump = -- h:object { $$ = h = list_new(h); }
     ( -- t:object { $$ = h = list_append(0, h, t); })*
     { yy->dump = h;}

object = "object" - i:OBJREF ';' - EOL
       { yy->object = (i == xr_sym("root")) ? root : object_new(0, i); }
       -- ( v:objvars )? { xrObjVars(yy->object) = v; }
       ( m:method {
            /* for each method we create a closure to hold it 
             * 1st arg = fptr = NULL since we have no jit :(
             * 2nd arg = 1 of slots to reserve, we need 1 for
             * the method. this is all temporary and weird and i'm not sure what im doing */
            XR cl = closure_new(NULL, 1);
            ((struct XRClosure *)cl)->native = 0;
            xrClosureAt(cl, 0) = m;
            object_add_closure(yy->object, cl); }
        )*
       { $$ = yy->object; }

objvars = i:objvar_item ';' - { i = xr_table_with_one(xrListAt(i,0), xrListAt(i,1)); }
            (EOL -- j:objvar_item ';' - { table_put(0, i, xrListAt(j,0), xrListAt(j,1)); })*
            { $$ = i; }

objvar_item = VAR i:ID EQUALS b:andor { $$ = list_build(2, i, ((struct XRAst*)b)->n[0]); }
                                
method = -- "method" - i:ID a:params -- s:code
       {
           struct XRMethod *m = xr_method_new(i, a); 
#if 0
           ast_graph_head(s);
           qsend(s, "source", xrNum(0));
#endif
           m->object = yy->object;
           ast_compile_method(s, m);
           $$ = yy->method = (XR)m; assert(yy->object); 
       }

    
params = '(' - ')' { $$ = list_empty(); }
       | '(' - p1:ID { p1 = list_new(p1); }
       (',' - p2:ID { p1 = list_append(0, p1, p2); })* ')'
       { $$ = p1; } 

code = LBRACE -- s:statements -- RBRACE
     { $$ = AST1(CODE, s);}

statements = s1:stmnt { $$ = s1 = list_new(s1); }
           ( SEP s2:stmnt { $$ = s1 = list_append(0, s1, s2); })* SEP?
           { $$ = s1; }

stmnt = b:andor                  { $$ = AST1(EXPRSTMT, b); }
     | c:code                   { $$ = c; }
     | VAR i:ID !EQUALS         { $$ = AST1(VDECL, i); }
     | VAR i:ID EQUALS b:andor  { $$ = AST2(VINIT, i, b); }
     | !'/'i:ID EQUALS b:andor      { $$ = AST2(ASSIGN, i, b); }
     | '/' i:ID EQUALS b:andor  { $$ = AST2(OBJASSIGN, i, b); }
     | "if" - '(' - b:andor - ')' -- t:stmnt -- "else" -- f:stmnt { $$ = AST3(IFELSE, b, t, f); }
     | "if" - '(' - b:andor - ')' -- t:stmnt { $$ = AST2(IF, b, t); }
     | "while" - '(' - b:andor - ')' -- t:stmnt { $$ = AST2(WHILE, b, t); }
     | "assert" - b:andor -     { $$ = AST1(ASSERT, b); }
     | "return" - b:andor -     { $$ = AST1(RETURN, b); }

#Top level expression?
expr = andor

andor = c:cmp
        ( AND x:cmp { c = AST2(AND, c, x); }
        | OR x:cmp  { c = AST2(OR, c, x);  })*
        { $$ = c; }

cmp = s:sum
      ( EQ  s2:sum { s = AST2(EQ, s, s2);  }
      | NEQ s2:sum { s = AST2(NEQ, s, s2); }
      | GT s2:sum  { s = AST2(GT, s, s2);  }
      | LT s2:sum  { s = AST2(LT, s, s2);  }
      | GTE s2:sum { s = AST2(GTE, s, s2); }
      | LTE s2:sum { s = AST2(LTE, s, s2); })*
      { $$ = s; }

arguments = LP - RP           - { $$ = VAL_NIL; }
          | '(' - l:expr_list ')' - { $$ = l; }

list = '[' -- ']' - { $$ = list_empty(); }
     | '[' -- l:expr_list -- ']' - { $$ = l; }

expr_list = h:andor { h = list_new(h); } (',' -- t:andor { list_append(0, h, t);} )* { $$ = h; }

sum = l:product
      ( PLUS  r:product { l = AST2(PLUS, l, r); }
      | DASH r:product { l = AST2(MINUS, l, r); })*
      { $$ = l; }

product = l:msg
          ( STAR  r:msg { l = AST2(TIMES, l, r); }
          | FSLASH r:msg { l = AST2(DIVIDE, l, r); })*
          { $$ = l; }

msg         = s:binary_not 
              ( i:ID !arguments            { s = AST3(SEND, s, AST1(SYMBOL, i), VAL_NIL);}
              | i:ID a:arguments { s = AST3(SEND, s, AST1(SYMBOL, i), a); })*
              { $$ = s; }

binary_not = v:value     { $$ = v;}
          | NOT v:value { $$ = AST1(NOT, v); }

#FIXME: sort out values/symbols/ids
value       = v:NUMBER          { $$ = AST1(NUMBER, v); }
            | v:str          { $$ = AST1(STRING, v); }
            | ':' v:ID          { $$ = AST1(SYMBOL, v); }
            | v:OBJREF          { $$ = v; }
            | v:list            { $$ = AST1(LIST, v); }
            | "false" -         { $$ = AST1(VALUE, VAL_FALSE); }
            | "true" -          { $$ = AST1(VALUE, VAL_TRUE); }
            | "nil" -           { $$ = AST1(VALUE, VAL_NIL); }
            | "self" -          { $$ = AST1(SELF, 0); }
            | v:ID !EQUALS      { $$ = AST1(VAR, v); }
            | "/" v:ID !EQUALS  { $$ = AST1(OBJVAR, v); }
            | LP e:expr RP      { $$ = e; }

OBJREF  = '$' v:ID { $$ = v; }
NUMBER  = FIXNUM | DECIMAL
FIXNUM  = < '-'? [0-9]+ !'.' >          - { $$ = xrNum(atoi(yytext)); }
DECIMAL = < [0-9]* '.'? [0-9]+ >        - { $$ = xr_double(atof(yytext)); }
ID      = !KEYWORD < [a-z] [a-z0-9_]* [?!]?> - { $$ = xr_sym_n(yytext, yyleng); }

utf8 = [\t\40-\176]
     | [\302-\337] [\200-\277]
     | [\340-\357] [\200-\277] [\200-\277]
     | [\360-\364] [\200-\277] [\200-\277] [\200-\277]
     | EOL

q = ["] { LOG("Matched quote.\n"); }
esc   = '\\'
esc_n = esc 'n' { string_buf = xr_str_append_chars_n(0, string_buf, "\n", 1) }
esc_b = esc 'b' { string_buf = xr_str_append_chars_n(0, string_buf, "\b", 1) }
esc_f = esc 'f' { string_buf = xr_str_append_chars_n(0, string_buf, "\f", 1) }
esc_r = esc 'r' { string_buf = xr_str_append_chars_n(0, string_buf, "\r", 1) }
esc_t = esc 't' { string_buf = xr_str_append_chars_n(0, string_buf, "\t", 1) }
esc_q = '\\' ["] { string_buf = xr_str_append_chars_n(0, string_buf, "\"", 1) }
char = < (!q !esc utf8)+ > { LOG("Matched utf8 seq = %.*s\n", yyleng, yytext); string_buf = xr_str_append_chars_n(0, string_buf, yytext, yyleng); }


str = q { string_buf = xr_str_empty(); }
            < ( esc_q | esc_n | esc_b | esc_f | esc_r | esc_t | char)* >
            q ~{ERROR("syntax error: reached end-of-line while scanning string literal\n");} - { $$ = string_buf; LOG("Matched whole string = [%s]\n", xrStrPtr(string_buf));  }

SEP     = (';' | EOL)   --

# TODO: sort out keywords
KEYWORD = "nil" !. | "while" | "self" | "else" | "true" | "false" | "if" | "var" | "assert" | "return"

EQUALS  = '=' !'='      -
PLUS    = '+'           -
DASH   = '-'           -
STAR   = '*'           -
FSLASH  = '/'           -
LP      = '('           -
RP      = ')'           -
VAR     = "var"         -
LBRACE  = '{'           -
RBRACE  = '}'           -
NOT     = '!'           -

EQ      = '=='          -
NEQ     = '!='          -
GT      = '>'           -
LT      = '<'           -
GTE     = '>='          -
LTE     = '<='          -

OR      = '||'          -
AND     = '&&'          -

SPACE   = ' ' | '\f' | '\v' | '\t'
COMMENT = '#' (!EOL .)*
EOL     = '\n' | '\r\n' | '\r'
-       = (SPACE | COMMENT)*
--      = (SPACE | COMMENT | EOL)*
#EOF     = !.
%%

/*
void yyerror(char *message, yycontext *yyctx)
{
    char *fileName = "<stdin>";
    FILE *input = stdin;
    fprintf(stderr, "%s:%d: %s", fileName, line_number, message);

    if (yyctx->text[0]) fprintf(stderr, " near token '%s'", yyctx->text);

    if (yyctx->pos < yyctx->limit || !feof(input)) {
        yyctx->buf[yyctx->limit]= '\0';
        fprintf(stderr, " before text \"");

        while (yyctx->pos < yyctx->limit) {
            if ('\n' == yyctx->buf[yyctx->pos] || '\r' == yyctx->buf[yyctx->pos]) break;
            fputc(yyctx->buf[yyctx->pos++], stderr);
        }

        if (yyctx->pos == yyctx->limit) {
            int c;
            while (EOF != (c= fgetc(input)) && '\n' != c && '\r' != c)
                fputc(c, stderr);
        }

        fputc('\"', stderr);
    }

    fprintf(stderr, "\n");
}
*/

XR xr_parse_code_from_stdin()
{
    yycontext ctx;
    memset(&ctx, 0, sizeof(yycontext));

    while (yyparsefrom(&ctx, yy_code));

    return ctx.src;
}

XR xr_parse_method_from_stdin()
{
    yycontext ctx;
    memset(&ctx, 0, sizeof(yycontext));

    while (yyparsefrom(&ctx, yy_method));

    return ctx.method;
}

XR xr_parse_dump_from_stdin()
{
    yycontext ctx;
    memset(&ctx, 0, sizeof(yycontext));

    ctx.line_number = 1;
    ctx.cursor = 0;
    ctx.filename = "stdin";
    ctx.file_handle = stdin;

    while (yyparsefrom(&ctx, yy_dump));

    //yyerror("syntax error", &ctx);
    return ctx.dump;
}

XR xr_parse_dump_file(char *filename)
{
    yycontext ctx;
    memset(&ctx, 0, sizeof(yycontext));
    ctx.line_number = 1;
    ctx.cursor = 0;
    ctx.filename = filename;
    ctx.file_handle = fopen(filename, "r");

    while (yyparsefrom(&ctx, yy_dump));

    return ctx.dump;
}

/*
XR xr_parse_any_from_stdin()
{

    yycontext ctx;
    memset(&ctx, 0, sizeof(yycontext));

    while (yyparsefrom(&ctx, yy_stmnt));
    //yyerror("syntax error", &ctx);

    return ctx.;
}
*/

